{
  "hash": "6e6182d2dd7f463273064a99c7b43c72",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Konrad Network\"\n---\n\n## Test Code\n\n::: {#9a063a82 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport os\nfrom dotenv import load_dotenv\nimport chromadb\nfrom chromadb.config import Settings\nfrom chromadb.utils import embedding_functions\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n```\n:::\n\n\n::: {#c2a5a0ca .cell execution_count=2}\n``` {.python .cell-code}\nclient = chromadb.Client(Settings(chroma_db_impl=\"duckdb+parquet\", persist_directory=\"db/\"))\nsentence_transformer_ef = embedding_functions.SentenceTransformerEmbeddingFunction(model_name=\"all-MiniLM-L6-v2\")\n\n# Data preparation\ndf = pd.read_excel('Konrad_Semantic_Data.xlsx', usecols=['ID', 'Semantic Content'])\n\nprint(df['Semantic Content'].dtype)\n\n# # Example mapping, adjust according to your actual data\n# politics_color_map = {\n#     'Very liberal': 'lightblue',\n#     'Liberal': 'blue',\n#     'Conservative': 'red',\n#     'Very conservative': 'darkred',\n#     'Libertarian': 'yellow',\n#     'Moderate': 'green',\n#     'Other (please specify)': 'gray'  # Assuming there's an 'Other' category, add more as needed\n# }\n# \n# # Map 'Politics' values to colors\n# df['color'] = df['Politics'].map(politics_color_map)\n\n\n# Collection handling\n# try:\n#     client.delete_collection(name=\"Participants\")\n# except Exception as e:\n#     print(f\"Error deleting collection: {e}\")\n# collection = client.create_collection(name=\"Participants\")\n# collection.add(\n#     documents=df['Semantic Content'].tolist(),\n#     metadatas=[{\"source\": str(name)} for name in df['ID']],  # Convert ID to string if not already\n#     ids=df['ID'].astype(str).tolist()  # Ensure IDs are strings\n# )\n\n# Convert 'Response' column to string, handling NaNs\ndf['Semantic Content'] = df['Semantic Content'].fillna('No response').astype(str)\n\n# Extract embeddings, ensuring each entry is treated as a list of one string\nembeddings = [np.array(sentence_transformer_ef([response])) for response in df['Semantic Content']]\ndf['embedding'] = embeddings\n\n# Check the first few embeddings to ensure they're stored correctly\nprint(df['embedding'].head())\n\n\n\n# Convert list of numpy arrays into a single numpy array for pairwise cosine similarity\nembedding_matrix = np.vstack(df['embedding'])\n\n# Calculate pairwise cosine similarity\nsimilarity_matrix = cosine_similarity(embedding_matrix)\n\n# Print the similarity matrix\nprint(\"Pairwise Cosine Similarity Matrix:\")\nprint(similarity_matrix)\n\nimport networkx as nx\nimport plotly.graph_objects as go\n\n# Your existing setup code for data preparation and similarity computation...\n\n# Create the network graph\nG = nx.Graph()\n\n# Add nodes with detailed attributes and edges based on cosine similarity\nthreshold = 0.2\nfor i, row in df.iterrows():\n    G.add_node(row['ID'], size=10)\n\nfor i in range(len(similarity_matrix)):\n    for j in range(i + 1, len(similarity_matrix)):\n        if similarity_matrix[i][j] > threshold:\n            G.add_edge(df['ID'][i], df['ID'][j], weight=similarity_matrix[i][j])\n\n# Position nodes using NetworkX layout\npos = nx.spring_layout(G, seed=42)\n\n# Prepare edge traces for Plotly\nedge_x = []\nedge_y = []\nfor edge in G.edges():\n    x0, y0 = pos[edge[0]]\n    x1, y1 = pos[edge[1]]\n    edge_x.extend([x0, x1, None])\n    edge_y.extend([y0, y1, None])\n\nedge_trace = go.Scatter(\n    x=edge_x, y=edge_y,\n    line=dict(width=0.5, color='#888'),\n    hoverinfo='none',\n    mode='lines'\n)\n\n# Prepare node traces for Plotly, including hover text\nnode_x = []\nnode_y = []\nnode_colors = []\nnode_text = []\nfor node in G.nodes():\n    x, y = pos[node]\n    node_x.append(x)\n    node_y.append(y)\n    #node_colors.append(G.nodes[node]['color'])\n    node_text.append(f\"ID: {node}\")\n\nnode_trace = go.Scatter(\n    x=node_x, y=node_y,\n    mode='markers',\n    hoverinfo='text',\n    text=node_text,\n    marker=dict(\n        size=10,\n        line=dict(width=2)\n    )\n)\n\n# Use both edge_trace and node_trace to create the figure\nfig = go.Figure(data=[edge_trace, node_trace],\n                layout=go.Layout(\n                    title='<br>Network graph made with cosine similarity',\n                    titlefont_size=16,\n                    showlegend=False,\n                    hovermode='closest',\n                    margin=dict(b=20, l=5, r=5, t=40),\n                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))\n                )\n\n# Display the figure\nfig.show()\n\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing embedded DuckDB with persistence: data will be stored in: db/\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nobject\n0    [[-0.0622498095035553, 0.04550383612513542, -0...\n1    [[0.0011474607745185494, 0.0649605467915535, 0...\n2    [[0.05321665108203888, -0.022301772609353065, ...\n3    [[0.047495245933532715, 0.03230271860957146, -...\n4    [[0.011559920385479927, 0.04137708619236946, -...\nName: embedding, dtype: object\nPairwise Cosine Similarity Matrix:\n[[1.         0.28481812 0.1357995  0.19849544 0.27286071 0.11107861\n  0.09219222 0.16894936]\n [0.28481812 1.         0.17660593 0.4140457  0.22986488 0.31908277\n  0.26190917 0.21075037]\n [0.1357995  0.17660593 1.         0.1627357  0.19104473 0.23899329\n  0.09546529 0.5386356 ]\n [0.19849544 0.4140457  0.1627357  1.         0.44382184 0.20501322\n  0.10238589 0.33019059]\n [0.27286071 0.22986488 0.19104473 0.44382184 1.         0.19811801\n  0.14849745 0.23137565]\n [0.11107861 0.31908277 0.23899329 0.20501322 0.19811801 1.\n  0.36379849 0.30427911]\n [0.09219222 0.26190917 0.09546529 0.10238589 0.14849745 0.36379849\n  1.         0.0879542 ]\n [0.16894936 0.21075037 0.5386356  0.33019059 0.23137565 0.30427911\n  0.0879542  1.        ]]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"aa4a99cd-cfaa-4d5a-8985-2d78607c375f\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"aa4a99cd-cfaa-4d5a-8985-2d78607c375f\")) {                    Plotly.newPlot(                        \"aa4a99cd-cfaa-4d5a-8985-2d78607c375f\",                        [{\"hoverinfo\":\"none\",\"line\":{\"color\":\"#888\",\"width\":0.5},\"mode\":\"lines\",\"x\":[0.30488284317035513,0.24125140277386917,null,0.30488284317035513,-0.24245417068421646,null,0.24125140277386917,-0.27793653357596243,null,0.24125140277386917,-0.24245417068421646,null,0.24125140277386917,0.1277630735105951,null,0.24125140277386917,0.7717299186363497,null,0.24125140277386917,-0.4041118048139781,null,-0.5211247290170121,0.1277630735105951,null,-0.5211247290170121,-0.4041118048139781,null,-0.27793653357596243,-0.24245417068421646,null,-0.27793653357596243,0.1277630735105951,null,-0.27793653357596243,-0.4041118048139781,null,-0.24245417068421646,-0.4041118048139781,null,0.1277630735105951,0.7717299186363497,null,0.1277630735105951,-0.4041118048139781,null],\"y\":[1.0,0.1848279550500457,null,1.0,0.6175237739172502,null,0.1848279550500457,0.17328012048250696,null,0.1848279550500457,0.6175237739172502,null,0.1848279550500457,-0.4579437871928304,null,0.1848279550500457,-0.3986731853580528,null,0.1848279550500457,-0.2685656957536569,null,-0.8504491811452625,-0.4579437871928304,null,-0.8504491811452625,-0.2685656957536569,null,0.17328012048250696,0.6175237739172502,null,0.17328012048250696,-0.4579437871928304,null,0.17328012048250696,-0.2685656957536569,null,0.6175237739172502,-0.2685656957536569,null,-0.4579437871928304,-0.3986731853580528,null,-0.4579437871928304,-0.2685656957536569,null],\"type\":\"scatter\"},{\"hoverinfo\":\"text\",\"marker\":{\"line\":{\"width\":2},\"size\":10},\"mode\":\"markers\",\"text\":[\"ID: Chesterton's Fence\",\"ID: Friedrich Hayek Quote\",\"ID: Classical Liberalism\",\"ID: John Stuart Mill Quote\",\"ID: Voltaire Quote\",\"ID: Types of Confirmation Bias\",\"ID: Availability Bias\",\"ID: Moral Foundations Theory\"],\"x\":[0.30488284317035513,0.24125140277386917,-0.5211247290170121,-0.27793653357596243,-0.24245417068421646,0.1277630735105951,0.7717299186363497,-0.4041118048139781],\"y\":[1.0,0.1848279550500457,-0.8504491811452625,0.17328012048250696,0.6175237739172502,-0.4579437871928304,-0.3986731853580528,-0.2685656957536569],\"type\":\"scatter\"}],                        {\"hovermode\":\"closest\",\"margin\":{\"b\":20,\"l\":5,\"r\":5,\"t\":40},\"showlegend\":false,\"title\":{\"font\":{\"size\":16},\"text\":\"\\u003cbr\\u003eNetwork graph made with cosine similarity\"},\"xaxis\":{\"showgrid\":false,\"showticklabels\":false,\"zeroline\":false},\"yaxis\":{\"showgrid\":false,\"showticklabels\":false,\"zeroline\":false},\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"},\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":30}}}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('aa4a99cd-cfaa-4d5a-8985-2d78607c375f');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n::: {#65d77b36 .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nimport matplotlib.pyplot as plt\n\n# Assuming similarity_matrix is your cosine similarity matrix from the previous steps\ndissimilarity_matrix = 1 - similarity_matrix\n\n# Hierarchical clustering\nlinked = linkage(dissimilarity_matrix, 'single')\n\n# Plotting the dendrogram\nplt.figure(figsize=(6, 7))\ndendrogram(linked,\n           orientation='left',\n           labels=df['ID'].astype(str).values,\n           distance_sort='descending',\n           show_leaf_counts=True)\nplt.title('Dendrogram of Semantic Content')\nplt.xlabel('Index')\nplt.ylabel('Distance')\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](konrad_files/figure-html/cell-4-output-1.png){width=706 height=597}\n:::\n:::\n\n\n",
    "supporting": [
      "konrad_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.27.0.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}